generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  schemas  = ["general", "push"]
}

model Subscription {
  subscriptionId Bytes                  @id @map("subscription_id") @db.Binary(16)
  websiteId      Bytes                  @map("website_id") @db.Binary(16)
  endpoint       String                 @db.VarChar(4096)
  expirationTime Float?                 @map("expiration_time")
  p256dh         Bytes?                 @db.Binary(65)
  auth           Bytes?                 @db.Binary(16)
  firstName      String?                @map("first_name")
  lastName       String?                @map("last_name")
  emailAddress   String?                @map("email_address")
  ipAddress      Bytes?                 @map("ip_address") @db.VarBinary(16)
  browser        String?
  browserVersion String?                @map("browser_version")
  mobile         Boolean?
  os             String?
  city           String?
  country        String?                @db.Char(2)
  latitude       Decimal?               @db.Decimal(7, 4)
  longitude      Decimal?               @db.Decimal(7, 4)
  errorCode      Int?                   @map("error_code") @db.SmallInt
  created        DateTime               @default(now()) @db.Timestamp(6)
  modified       DateTime               @default(now()) @db.Timestamp(6)
  websites       Website                @relation(fields: [websiteId], references: [websiteId], map: "FK_subscriptions_websites")
  interests      SubscriptionInterest[]

  @@index([websiteId], map: "FK_subscriptions_websites")
  @@map("subscriptions")
}

model Website {
  websiteId     Bytes          @id @map("website_id") @db.Binary(16)
  name          String         @unique(map: "name")
  created       DateTime       @default(now()) @db.Timestamp(6)
  interests     Interest[]
  subscriptions Subscription[]

  @@map("websites")
}

model Interest {
  interestId    Bytes                  @id @map("interest_id") @db.Binary(16)
  websiteId     Bytes                  @map("website_id") @db.Binary(16)
  name          String
  description   String?                @db.Text
  websites      Website                @relation(fields: [websiteId], references: [websiteId], onDelete: Cascade, map: "FK_interests_websites")
  subscriptions SubscriptionInterest[]

  @@unique([websiteId, name], map: "website_id_name")
  @@map("interests")
}

model SubscriptionInterest {
  subscriptionId Bytes        @map("subscription_id") @db.Binary(16)
  interestId     Bytes        @map("interest_id") @db.Binary(16)
  created        DateTime     @default(now()) @db.Timestamp(6)
  interest       Interest     @relation(fields: [interestId], references: [interestId], map: "FK_subscriptions_interests_interests")
  subscription   Subscription @relation(fields: [subscriptionId], references: [subscriptionId], onDelete: Cascade, map: "FK_subscriptions_interests_subscriptions")

  @@id([subscriptionId, interestId], name: "subscriptionIdInterestId")
  @@index([interestId], map: "FK_subscriptions_interests_interests")
  @@map("subscriptions_interests")
}

model User {
  userId               Int            @id @map("id")
  username             String         @db.VarChar(50) @unique
  passwordHash         String?        @db.VarChar(255) @map("pw_hash")
  salt                 String?        @db.Char(32)
  password             String?        @db.Char(64)
  expiry               DateTime?      @db.Timestamp()
  sex                  UserSex
  firstName            String         @db.VarChar(50) @map("first_name")
  lastName             String         @db.VarChar(50) @map("last_name")
  emailAddress         String         @db.VarChar(255) @map("email_address")
  deleteEnrollmentPriv Boolean        @map("delete_enrollment_priv") @default(false)
  voidPriv             Boolean        @map("void_priv") @default(false)
  lastLogin            DateTime?      @db.Timestamp @map("last_login")
  refreshTokens        RefreshToken[]
  
  @@map("users")
  @@schema("general")
}

enum UserSex {
  M
  F
}

model RefreshToken {
  refreshTokenId  Bytes          @id @map("refresh_token_id") @db.Binary(16)
  userId          Int            @map("user_id")
  token           Bytes          @unique(map: "token") @db.Binary(64)
  expiry          DateTime       @db.Timestamp(0)
  ipAddress       Bytes?         @map("ip_address") @db.VarBinary(16)
  browser         String?
  browserVersion  String?        @map("browser_version")
  mobile          Boolean?
  os              String?
  city            String?
  country         String?        @db.Char(2)
  latitude        Decimal?       @db.Decimal(7, 4)
  longitude       Decimal?       @db.Decimal(7, 4)
  created         DateTime       @default(now()) @db.Timestamp(0)
  modified        DateTime       @default(now()) @db.Timestamp(0)
  user            User           @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "FK_refresh_tokens_users")

  @@index([userId], map: "user_id")
  @@map("refresh_tokens")
  @@schema("general")
}