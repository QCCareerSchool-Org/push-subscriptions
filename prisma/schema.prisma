generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Subscription {
  subscriptionId Bytes                  @id @map("subscription_id") @db.Binary(16)
  websiteId      Bytes                  @map("website_id") @db.Binary(16)
  endpoint       String                 @db.VarChar(4096)
  expirationTime Float?                 @map("expiration_time")
  p256dh         Bytes?                 @db.Binary(65)
  auth           Bytes?                 @db.Binary(16)
  firstName      String?                @map("first_name")
  lastName       String?                @map("last_name")
  emailAddress   String?                @map("email_address")
  errorCode      Int?                   @map("error_code") @db.SmallInt
  created        DateTime               @default(now()) @db.Timestamp(6)
  modified       DateTime               @default(now()) @db.Timestamp(6)
  websites       Website                @relation(fields: [websiteId], references: [websiteId], map: "FK_subscriptions_websites")
  interests      SubscriptionInterest[]

  @@index([websiteId], map: "FK_subscriptions_websites")
  @@map("subscriptions")
}

model Website {
  websiteId     Bytes          @id @map("website_id") @db.Binary(16)
  name          String         @unique(map: "name")
  created       DateTime       @default(now()) @db.Timestamp(6)
  interests     Interest[]
  subscriptions Subscription[]

  @@map("websites")
}

model Interest {
  interestId    Bytes                  @id @map("interest_id") @db.Binary(16)
  websiteId     Bytes                  @db.Binary(16) @map("website_id")
  name          String
  description   String?                @db.Text
  websites      Website                @relation(fields: [websiteId], references: [websiteId], onDelete: Cascade, map: "FK_interests_websites")
  subscriptions SubscriptionInterest[]

  @@unique([websiteId, name], map: "website_id_name")
  @@map("interests")
}

model SubscriptionInterest {
  subscriptionId Bytes        @map("subscription_id") @db.Binary(16)
  interestId     Bytes        @map("interest_id") @db.Binary(16)
  created        DateTime     @default(now()) @db.Timestamp(6)
  interest       Interest     @relation(fields: [interestId], references: [interestId], map: "FK_subscriptions_interests_interests")
  subscription   Subscription @relation(fields: [subscriptionId], references: [subscriptionId], onDelete: Cascade, map: "FK_subscriptions_interests_subscriptions")

  @@id([subscriptionId, interestId], name: "subscriptionIdInterestId")
  @@index([interestId], map: "FK_subscriptions_interests_interests")
  @@map("subscriptions_interests")
}
